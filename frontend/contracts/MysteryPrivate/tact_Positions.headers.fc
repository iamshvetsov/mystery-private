;;
;; Header files for Positions
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_eq
int __tact_slice_eq(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $InternalOpenPosition$_load
(slice, ((slice, slice, int, int, int))) $InternalOpenPosition$_load(slice sc_0) inline;

;; $InternalClosePosition$_load
(slice, ((slice, int, int))) $InternalClosePosition$_load(slice sc_0) inline;

;; $InternalLiquidatePosition$_load
(slice, ((slice, int, int))) $InternalLiquidatePosition$_load(slice sc_0) inline;

;; $Position$_store
builder $Position$_store(builder build_0, (int, slice, int, int, int, slice, int) v) inline_ref;

;; $Position$_store_cell
cell $Position$_store_cell((int, slice, int, int, int, slice, int) v) inline;

;; $Position$_load
(slice, ((int, slice, int, int, int, slice, int))) $Position$_load(slice sc_0) inline_ref;

;; $Position$_as_optional
tuple $Position$_as_optional((int, slice, int, int, int, slice, int) v) inline;

;; $Position$_load_opt
tuple $Position$_load_opt(cell cl) inline;

;; $Positions$_store
builder $Positions$_store(builder build_0, (slice, slice, int, cell) v) inline;

;; $Positions$_load
(slice, ((slice, slice, int, cell))) $Positions$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Position$_not_null
((int, slice, int, int, int, slice, int)) $Position$_not_null(tuple v) inline;

;; $Positions$init$_load
(slice, ((slice, slice))) $Positions$init$_load(slice sc_0) inline;

;; $Positions$_contract_init
(slice, slice, int, cell) $Positions$_contract_init(slice $parent, slice $owner) impure inline_ref;

;; $Positions$_contract_load
(slice, slice, int, cell) $Positions$_contract_load() impure inline_ref;

;; $Positions$_contract_store
() $Positions$_contract_store((slice, slice, int, cell) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Positions$_fun_numPositions
((slice, slice, int, cell), int) $Positions$_fun_numPositions((slice, slice, int, cell) $self) impure inline_ref;

;; $Positions$_fun_positions
((slice, slice, int, cell), cell) $Positions$_fun_positions((slice, slice, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Positions$_fun_forward
((slice, slice, int, cell), ()) $Positions$_fun_forward((slice, slice, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Positions$_fun_notify
((slice, slice, int, cell), ()) $Positions$_fun_notify((slice, slice, int, cell) $self, cell $body) impure inline;

;; $Position$_constructor_seqno_token_entryPrice_amount_liquidationPrice_status_closePrice
((int, slice, int, int, int, slice, int)) $Position$_constructor_seqno_token_entryPrice_amount_liquidationPrice_status_closePrice(int $seqno, slice $token, int $entryPrice, int $amount, int $liquidationPrice, slice $status, int $closePrice) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
